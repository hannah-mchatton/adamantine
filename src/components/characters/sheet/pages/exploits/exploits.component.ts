import { Component, Input } from '@angular/core';
import { CharacterSheetService } from 'src/services/character-sheet.service';

@Component({
  selector: 'cs-exploits',
  templateUrl: './exploits.component.html',
  styleUrls: ['./exploits.component.scss'],
})
export class ExploitsComponent {
  @Input() character: any;
  @Input() characterExploits: any[];

  public modalVisible;
  public modalOption;

  constructor(private characterSheetService: CharacterSheetService) {}

  public openModal(spellName: string) {
    this.modalVisible = true;
    this.modalOption = spellName;
  }

  public characterLevel() {
    if (this.character?.classes) {
      return this.character.classes.reduce(
        (partialSum, a) => partialSum + a.level,
        0
      );
    }
    return 0;
  }
  public proficiencyBonus() {
    return Math.floor(2 + (this.characterLevel() - 1) / 4);
  }

  public getExploitDC(ability: string): number {
    const abilityMod = parseInt(this.getModifier(ability).toString());
    const prof = this.proficiencyBonus();

    return 8 + abilityMod + prof;
  }

  public getScore(score: string): number {
    return (this.character.scores?.actual ?? {})[score];
  }
  public getModifier(score: string): number {
    return this.modifier(this.getScore(score));
  }

  public modifier(score: number): number {
    let mod = -5;
    if (score) {
      mod = Math.floor((score - 10) / 2);
    }
    return mod;
  }

  public formatModifier(modifier: number): string {
    if (modifier !== undefined) {
      if (modifier > 0) {
        return `+${modifier}`;
      } else {
        return modifier.toString();
      }
    }
    return '';
  }
}
